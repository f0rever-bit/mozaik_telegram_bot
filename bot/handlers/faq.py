from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
import httpx
import re

from handlers.start import main_menu_keyboard  # –Ü–ú–ü–û–†–¢ –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

router = Router()

faq_data = {
    "üîë –ê–∫—Ç–∏–≤–∞—Ü—ñ—è mozaBook": "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–¥ Classroom+ —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –ø—Ä–æ–≥—Ä–∞–º–∏.",
    "üåê –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ mozaWeb": "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ https://www.mozaweb.com —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'.",
    "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—ñ–≤": "–í–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É—Ä–æ–∫–∏ —É PDF –∞–±–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ mozaBook.",
    "üß© –í—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥–µ–æ/3D-—Å—Ü–µ–Ω": "–ß–µ—Ä–µ–∑ –º–µ–Ω—é –≤—Å—Ç–∞–≤–∫–∏ –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: –≤—ñ–¥–µ–æ –∞–±–æ 3D-—Å—Ü–µ–Ω–∞.",
    "üì± –ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤—Ö–æ–¥–æ–º": "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∞—à –∞–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å.",
}

class FAQState(StatesGroup):
    awaiting_question = State()

faq_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=question)] for question in faq_data.keys()] + [
        [KeyboardButton(text="üß† –Ü–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è")],
        [KeyboardButton(text="üè† –ú–µ–Ω—é")]
    ],
    resize_keyboard=True
)

def markdown_to_html(text: str) -> str:
    text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
    text = re.sub(r"\*(.+?)\*", r"<i>\1</i>", text)
    return text

@router.message(F.text == "‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è (FAQ)")
async def show_faq(message: Message, state: FSMContext):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ—î:", reply_markup=faq_keyboard)
    await state.set_state(FAQState.awaiting_question)

@router.message(F.text.in_(faq_data.keys()))
async def send_direct_faq(message: Message, state: FSMContext):
    await message.answer(f"üìå <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>{faq_data[message.text]}", parse_mode="HTML")

@router.message(F.text == "üß† –Ü–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è")
async def ask_custom_faq(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, —Å–ø–∏—Ä–∞—é—á–∏—Å—å –Ω–∞ –±–∞–∑—É –∑–Ω–∞–Ω—å (FAQ).")

@router.message(F.text == "üè† –ú–µ–Ω—é")
async def exit_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu_keyboard)

@router.message(FAQState.awaiting_question)
async def handle_custom_question(message: Message, state: FSMContext):
    if message.text == "üè† –ú–µ–Ω—é":
        await exit_to_menu(message, state)
        return

    user_question = message.text
    await message.answer("‚è≥ –§–æ—Ä–º—É–ª—é—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ...")

    faq_summary = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in faq_data.items()])

    styled_prompt = f"""–¢–∏ –æ—Å–≤—ñ—Ç–Ω—ñ–π Telegram-–±–æ—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —Å—Ç–∏—Å–ª–æ, –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ.

üìå –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π:
‚Äî –µ–º–æ–¥–∑—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ä—ñ—î–Ω—Ç—É–≤–∞–Ω–Ω—è
‚Äî –∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–Ω—è—Ç—å
‚Äî –Ω—É–º–µ—Ä–æ–≤–∞–Ω—ñ –∞–±–æ –º–∞—Ä–∫–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏
‚Äî –ø–æ—Ä–∞–¥–∏ –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (–∑ ‚ö†Ô∏è —á–∏ üí°) –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ

–ù–µ –ø–∏—à–∏ –¥–æ–≤–≥–∏—Ö –∞–±–∑–∞—Ü—ñ–≤ ‚Äî –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–ø–∏—Å–∫–∏. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –æ–Ω–ª–∞–π–Ω-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤.

üìö –û—Å—å –±–∞–∑–∞ –∑–Ω–∞–Ω—å FAQ:
{faq_summary}
"""

    api_url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://t.me/mozaik_edpro_bot",
        "X-Title": "Mozaik Edu Bot"
    }

    payload = {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "messages": [
            {"role": "system", "content": styled_prompt},
            {"role": "user", "content": user_question}
        ]
    }

    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(api_url, headers=headers, json=payload)
            result = response.json()

        if "choices" in result:
            reply = result["choices"][0]["message"]["content"]
        else:
            reply = f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}"

        max_length = 4000
        for i in range(0, len(reply), max_length):
            chunk = markdown_to_html(reply[i:i+max_length])
            await message.answer(chunk, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:\n<code>{str(e)}</code>")
